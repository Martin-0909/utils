use std::fs::File;
use std::io::Write;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // 创建 3D 点数据
    let points = vec![
        [0.0, 0.0, 0.0],
        [1.0, 1.0, 1.0],
        [2.0, 0.5, 1.5],
        [-1.0, 2.0, 0.5],
    ];
    
    // 创建简单的 JSON 格式数据
    let mut json_content = String::new();
    json_content.push_str("{\n");
    json_content.push_str("  \"application\": \"Bazel + Rust 3D Points Sample\",\n");
    json_content.push_str("  \"generated_by\": \"Bazel 7.6.1 + rules_rust 0.49.3\",\n");
    json_content.push_str("  \"points_3d\": [\n");
    
    for (i, point) in points.iter().enumerate() {
        json_content.push_str(&format!("    [{}, {}, {}]", point[0], point[1], point[2]));
        if i < points.len() - 1 {
            json_content.push_str(",");
        }
        json_content.push_str("\n");
    }
    
    json_content.push_str("  ],\n");
    json_content.push_str(&format!("  \"count\": {}\n", points.len()));
    json_content.push_str("}\n");
    
    // 写入 JSON 文件
    let mut file = File::create("points_3d_data.json")?;
    file.write_all(json_content.as_bytes())?;
    
    // 创建一个简单的 CSV 文件
    let mut csv_file = File::create("points_3d_data.csv")?;
    writeln!(csv_file, "x,y,z")?;
    for point in &points {
        writeln!(csv_file, "{},{},{}", point[0], point[1], point[2])?;
    }
    
    // 创建一个简单的 Python 可视化脚本
    let python_script = r#"#!/usr/bin/env python3
import json
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# 读取 JSON 数据
with open('points_3d_data.json', 'r') as f:
    data = json.load(f)

points = data['points_3d']
x = [p[0] for p in points]
y = [p[1] for p in points]
z = [p[2] for p in points]

# 创建 3D 散点图
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c='red', marker='o', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Points Generated by Bazel + Rust')

# 添加网格
ax.grid(True)

# 保存图像
plt.savefig('3d_points_visualization.png', dpi=300, bbox_inches='tight')
print("✅ 3D visualization saved as '3d_points_visualization.png'")

plt.show()
"#;
    
    let mut py_file = File::create("visualize_points.py")?;
    py_file.write_all(python_script.as_bytes())?;
    
    println!("✅ 3D points data files generated successfully!");
    println!("📊 Generated files:");
    println!("   - points_3d_data.json (详细的 JSON 格式)");
    println!("   - points_3d_data.csv  (简单的 CSV 格式)");  
    println!("   - visualize_points.py (Python 可视化脚本)");
    println!("📈 Points count: {}", points.len());
    println!();
    println!("🚀 使用方法:");
    println!("   python3 visualize_points.py  # 生成 3D 可视化图像");
    
    Ok(())
}
